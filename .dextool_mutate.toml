[workarea]
# base path (absolute or relative) to look for C/C++ files to mutate.
root = "."

# only those files that fully match the glob filter will be mutated.
# glob filter are relative to root.
include = ["googlemock/include/*", "googlemock/src/*", "googletest/include/*", "googletest/src/*"]
exclude = []

[generic]

# default mutants to test if none is specified by --mutant
# note that this affects the analyze phase thus the --mutant argument must be one of those specified here
# available options are: ["all", "ror", "rorp", "lcr", "aor", "uoi", "abs", "sdl", "dcc", "dcr", "lcrb"]
mutants = ["lcr", "lcrb", "sdl", "uoi", "dcr"]

[analyze]

# glob filter which include/exclude matched files (relative to root) from analysis.
include = ["*"]
exclude = ["googlemock/test/*", "googletest/test/*"]

# number of threads to be used for analysis (default is the number of cores).
# threads = 1

# remove files from the database that are no longer found during analysis.
prune = true

# maximum number of mutants per schema (zero means no limit).
# mutants_per_schema = 100

# checksum the files in this directories and warn if a mutation status is older
# than the newest file. The path can be a file or a directory. Directories
# are traveresed.
test_paths = ["googletest/test", "googlemock/test"]

# glob filter which include/exclude matched test files (relative to root) from analysis.
test_include = ["*/*.cc"]
# test_exclude = []

[database]

# path (absolute or relative) where mutation statistics will be stored.
db = "dextool_mutate.sqlite3"

[compiler]

# extra flags to pass on to the compiler such as the C++ standard.
extra_flags = [ "-D_POSIX_PATH_MAX=1024" ]

# force system includes to use -I instead of -isystem
# force_system_includes = true

# system include paths to use instead of the ones in compile_commands.json
# use_compiler_system_includes = "/path/to/c++"

[compile_commands]

# files and/or directories to look for compile_commands.json.
search_paths = ["./build/compile_commands.json"]

# compile flags to remove when analyzing a file.
filter = ["-c", "-o", "-m", "-nodevicelib", "-Waddr-space-convert", "-non-static", "-Bstatic", "-Bdynamic", "-Xbind-lazy", "-Xbind-now", "-f", "-static", "-shared", "-rdynamic", "-s", "-l", "-L", "-z", "-u", "-T", "-Xlinker", "-l", "-MT", "-MF", "-MD", "-MQ", "-MMD", "-MP", "-MG", "-E", "-cc1", "-S", "-M", "-MM", "-###", "-Werror", "-Wunused-private-field"]

# number of compiler arguments to skip from the beginning (needed when the first argument is NOT a compiler but rather a wrapper).
# skip_compiler_args = 0

[mutant_test]

# command to build the program **and** test suite.
build_cmd = "cd build && make -j$(nproc)"

# at least one of test_cmd_dir (recommended) or test_cmd needs to be specified.

# path(s) to recursively look for test binaries to execute.
# test_cmd_dir = ["./build/test"]

# flags to add to all executables found in test_cmd_dir.
# test_cmd_dir_flag = ["--gtest_filter", "-*foo"]

# command(s) to test the program.
# the arguments for test_cmd can be an array of multiple test commands
# 1. ["test1.sh", "test2.sh"]
# 2. [["test1.sh", "-x"], "test2.sh"]
test_cmd = [["build/googletest/gtest_unittest"], ["build/googletest/gtest_xml_outfile2_test_"], ["build/googletest/gtest_skip_test"], ["build/googletest/gtest_skip_in_environment_setup_test"], ["build/googletest/googletest-catch-exceptions-no-ex-test_"], ["build/googletest/googletest-test-part-test"], ["build/googletest/gtest_main_unittest"], ["build/googletest/googletest-param-test-test"], ["build/googletest/gtest-typed-test_test"], ["build/googletest/gtest_sole_header_test"], ["build/googletest/googletest-printers-test"], ["build/googletest/gtest_prod_test"], ["build/googletest/googletest-port-test"], ["build/googletest/googletest-uninitialized-test_"], ["build/googletest/gtest_pred_impl_unittest"], ["build/googletest/gtest_no_rtti_unittest"], ["build/googletest/gtest_environment_test"], ["build/googletest/gtest-unittest-api_test"], ["build/googletest/googletest-filepath-test"], ["build/googletest/googletest-listener-test"], ["build/googletest/googletest-death-test-test"], ["build/googletest/googletest-message-test"], ["build/googletest/googletest-shuffle-test_"], ["build/googletest/gtest_no_test_unittest"], ["build/googletest/googletest-options-test"], ["build/googletest/gtest_xml_outfile1_test_"], ["build/googletest/googletest-list-tests-unittest_"], ["build/googletest/gtest_list_output_unittest_"], ["build/googletest/googletest-throw-on-failure-test_"], ["build/googletest/gtest-death-test_ex_catch_test"], ["build/googletest/gtest_stress_test"], ["build/googletest/gtest_repeat_test"], ["build/googletest/gtest_premature_exit_test"], ["build/googletest/gtest_throw_on_failure_ex_test"], ["build/googletest/gtest-death-test_ex_nocatch_test"], ["build/googlemock/gmock-matchers_test"], ["build/googlemock/gmock_link_test"], ["build/googlemock/gmock_no_rtti_test"], ["build/googlemock/gmock-function-mocker_test"], ["build/googlemock/gmock_test"], ["build/googlemock/gmock_ex_test"], ["build/googlemock/gmock-actions_test"], ["build/googlemock/gmock-generated-actions_test"], ["build/googlemock/gmock-nice-strict_test"], ["build/googlemock/gmock-more-actions_no_exception_test"], ["build/googlemock/gmock-internal-utils_test"], ["build/googlemock/gmock-cardinalities_test"], ["build/googlemock/gmock-spec-builders_test"], ["build/googlemock/gmock-more-actions_test"], ["build/googlemock/gmock-port_test"], ["build/googlemock/gmock_stress_test"], ["build/googlemock/shared_gmock_test_"], ["build/googlemock/gmock-generated-matchers_test"]]
# failing [["build/lib/libshared_gmock_main.so"], ["build/lib/libgtest_dll.so"], ["build/googletest/googletest-catch-exceptions-ex-test_"], ["build/googletest/gtest_help_test_"], ["build/googletest/gtest_dll_test_"], ["build/googletest/googletest-env-var-test_"], ["build/googletest/googletest-color-test_"], ["build/googletest/googletest-filter-unittest_"], ["build/googletest/googletest-output-test_"], ["build/googletest/gtest_xml_output_unittest_"], ["build/googletest/googletest-break-on-failure-unittest_"], ["build/googlemock/gmock_leak_test_"], ["build/googlemock/gmock_output_test_"], ["build/CMakeFiles/3.16.3/CMakeDetermineCompilerABI_CXX.bin"], ["build/CMakeFiles/3.16.3/CMakeDetermineCompilerABI_C.bin"], ["build/CMakeFiles/3.16.3/CompilerIdCXX/a.out"], ["build/CMakeFiles/3.16.3/CompilerIdC/a.out"]]
# failing [["build/googlemock/gmock_output_test_"], ["build/googlemock/gmock_leak_test_"], ["build/googletest/gtest_xml_output_unittest_"], ["build/googletest/googletest-color-test_"], ["build/googletest/googletest-break-on-failure-unittest_"], ["build/googletest/googletest-filter-unittest_"], ["build/googletest/googletest-catch-exceptions-ex-test_"], ["build/googletest/googletest-output-test_"], ["build/googletest/googletest-env-var-test_"], ["build/googletest/gtest_help_test_"], ["build/googletest/gtest_dll_test_"]]
# test_cmd_timeout = 7000

# timeout to use for the test suite (by default a measurement-based heuristic will be used).
# test_cmd_timeout = "1 hours 1 minutes 1 seconds 1 msecs"

# timeout to use when compiling the program and test suite (default: 30 minutes)
# build_cmd_timeout = "1 hours 1 minutes 1 seconds 1 msecs"

# program used to analyze the output from the test suite for test cases that killed the mutant
# analyze_cmd = "analyze.sh"

# built-in analyzer of output from testing frameworks to find failing test cases
analyze_using_builtin = ["gtest"]

# determine in what order mutations are chosen
# order = "random"|"consecutive"

# how to behave when new test cases are found
detected_new_test_case = "resetAlive"

# how to behave when test cases are detected as having been removed
# should the test and the gathered statistics be removed too?
detected_dropped_test_case = "remove"

# how the oldest mutants should be treated.
# It is recommended to test them again.
# Because you may have changed the test suite so mutants that where previously killed by the test suite now survive.
# oldest_mutants = "nothing"|"test"

# how many of the oldest mutants to do the above with
# oldest_mutants_nr = 10
# how many of the oldest mutants to do the above with
# oldest_mutants_percentage = 1.0

# number of threads to be used when running tests in parallel (default is the number of cores).
# parallel_test = 1

# stop executing tests as soon as a test command fails.
# This speed up the test phase but the report of test cases killing mutants is less accurate
use_early_stop = true

# reduce the compile and link time when testing mutants
use_schemata = true

# sanity check the schemata before it is used by executing the test cases
# it is a slowdown but nice robustness that is usually worth having
check_schemata = true

[report]

# default style to use
# style = "plain"|"compiler"|"json"|"html"

[test_group]

# subgroups with a description and pattern. Example:
# [test_group.uc1]
# description = "use case 1"
# pattern = "uc_1.*"
# see for regex syntax: http://dlang.org/phobos/std_regex.html
