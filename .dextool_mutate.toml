[workarea]

# base path (absolute or relative) to look for C/C++ files to mutate.
root = "."

# only those files that fully match the glob filter will be mutated.
# glob filter are relative to root.
include = ["include/*", "src/*"]
exclude = []

[generic]

# default mutants to test if none is specified by --mutant
# note that this affects the analyze phase thus the --mutant argument must be one of those specified here
# available options are: ["all", "ror", "rorp", "lcr", "aor", "uoi", "sdl", "dcr", "lcrb", "aors"]
mutants = ["lcr", "lcrb", "sdl", "uoi", "dcr"]

[analyze]

# glob filter which include/exclude matched files (relative to root) from analysis.
include = ["*"]
exclude = []

# number of threads to be used for analysis (default is the number of cores).
# threads = 8

# remove files from the database that are no longer found during analysis.
prune = true

# checksum the files in this directories and warn if a mutation status is older
# than the newest file. The path can be a file or a directory. Directories
# are traveresed. All paths are relative to root.
# test_paths = ["test/suite1", "test/mytest.cpp"]

# glob filter which include/exclude matched test files (relative to root) from analysis.
# test_include = ["*/*.ext"]
# test_exclude = []

[schema]

# Use scheman to reduce the compile+link time
use = true

# how to add the schema runtime to the SUT
# available options are: "inject", "library"
# runtime = "library"

# Default is to inject the runtime in all roots. A root is a file either provided by --in
# or a file in compile_commands.json.
# If specified then the coverage and schemata runtime is only injected in these files.
# paths are relative to root.
# inject_runtime_impl = [["file1.c", "c"], ["file2.c", "cpp"]]
inject_runtime_impl = [
["tests/test_abstract_ipc.cpp", "cpp"],
["tests/test_address_tipc.cpp", "cpp"],
["tests/test_ancillaries.cpp", "cpp"],
["tests/test_app_meta.cpp", "cpp"],
["tests/test_atomics.cpp", "cpp"],
["tests/test_base85.cpp", "cpp"],
["tests/test_bind_after_connect_tcp.cpp", "cpp"],
["tests/test_bind_curve_fuzzer.cpp", "cpp"],
["tests/test_bind_fuzzer.cpp", "cpp"],
["tests/test_bind_null_fuzzer.cpp", "cpp"],
["tests/test_bind_src_address.cpp", "cpp"],
["tests/test_bind_stream_fuzzer.cpp", "cpp"],
["tests/test_bind_ws_fuzzer.cpp", "cpp"],
["tests/test_busy_poll.cpp", "cpp"],
["tests/test_capabilities.cpp", "cpp"],
["tests/test_channel.cpp", "cpp"],
["tests/test_client_server.cpp", "cpp"],
["tests/test_conflate.cpp", "cpp"],
["tests/test_connect_curve_fuzzer.cpp", "cpp"],
["tests/test_connect_delay_tipc.cpp", "cpp"],
["tests/test_connect_fuzzer.cpp", "cpp"],
["tests/test_connect_null_fuzzer.cpp", "cpp"],
["tests/test_connect_resolve.cpp", "cpp"],
["tests/test_connect_rid.cpp", "cpp"],
["tests/test_connect_stream_fuzzer.cpp", "cpp"],
["tests/test_connect_ws_fuzzer.cpp", "cpp"],
["tests/test_ctx_destroy.cpp", "cpp"],
["tests/test_ctx_options.cpp", "cpp"],
["tests/test_dgram.cpp", "cpp"],
["tests/test_diffserv.cpp", "cpp"],
["tests/test_disconnect_inproc.cpp", "cpp"],
["tests/test_disconnect_msg.cpp", "cpp"],
["tests/test_filter_ipc.cpp", "cpp"],
["tests/test_fork.cpp", "cpp"],
["tests/test_getsockopt_memset.cpp", "cpp"],
["tests/test_heartbeats.cpp", "cpp"],
["tests/test_hello_msg.cpp", "cpp"],
["tests/test_hwm.cpp", "cpp"],
["tests/test_hwm_pubsub.cpp", "cpp"],
["tests/test_immediate.cpp", "cpp"],
["tests/test_inproc_connect.cpp", "cpp"],
["tests/test_invalid_rep.cpp", "cpp"],
["tests/test_iov.cpp", "cpp"],
["tests/test_ipc_wildcard.cpp", "cpp"],
["tests/test_issue_566.cpp", "cpp"],
["tests/test_last_endpoint.cpp", "cpp"],
["tests/test_many_sockets.cpp", "cpp"],
["tests/test_metadata.cpp", "cpp"],
["tests/test_mock_pub_sub.cpp", "cpp"],
["tests/test_monitor.cpp", "cpp"],
["tests/test_msg_ffn.cpp", "cpp"],
["tests/test_msg_flags.cpp", "cpp"],
["tests/test_msg_init.cpp", "cpp"],
["tests/test_pair_inproc.cpp", "cpp"],
["tests/test_pair_ipc.cpp", "cpp"],
["tests/test_pair_tcp_cap_net_admin.cpp", "cpp"],
["tests/test_pair_tcp.cpp", "cpp"],
["tests/test_pair_tipc.cpp", "cpp"],
["tests/test_pair_vmci.cpp", "cpp"],
["tests/test_peer.cpp", "cpp"],
["tests/test_poller.cpp", "cpp"],
["tests/test_probe_router.cpp", "cpp"],
["tests/test_proxy.cpp", "cpp"],
["tests/test_proxy_hwm.cpp", "cpp"],
["tests/test_proxy_single_socket.cpp", "cpp"],
["tests/test_proxy_terminate.cpp", "cpp"],
["tests/test_pub_invert_matching.cpp", "cpp"],
["tests/test_pubsub.cpp", "cpp"],
["tests/test_radio_dish.cpp", "cpp"],
["tests/test_rebind_ipc.cpp", "cpp"],
["tests/test_reconnect_ivl.cpp", "cpp"],
["tests/test_reconnect_options.cpp", "cpp"],
["tests/test_req_correlate.cpp", "cpp"],
["tests/test_req_relaxed.cpp", "cpp"],
["tests/test_reqrep_device.cpp", "cpp"],
["tests/test_reqrep_device_tipc.cpp", "cpp"],
["tests/test_reqrep_inproc.cpp", "cpp"],
["tests/test_reqrep_ipc.cpp", "cpp"],
["tests/test_reqrep_tcp.cpp", "cpp"],
["tests/test_reqrep_tipc.cpp", "cpp"],
["tests/test_reqrep_vmci.cpp", "cpp"],
["tests/test_router_handover.cpp", "cpp"],
["tests/test_router_mandatory.cpp", "cpp"],
["tests/test_router_mandatory_hwm.cpp", "cpp"],
["tests/test_router_mandatory_tipc.cpp", "cpp"],
["tests/test_router_notify.cpp", "cpp"],
["tests/test_scatter_gather.cpp", "cpp"],
["tests/test_security_curve.cpp", "cpp"],
["tests/test_security_gssapi.cpp", "cpp"],
["tests/test_security_no_zap_handler.cpp", "cpp"],
["tests/test_security_null.cpp", "cpp"],
["tests/test_security_plain.cpp", "cpp"],
["tests/test_security_zap.cpp", "cpp"],
["tests/test_setsockopt.cpp", "cpp"],
["tests/test_shutdown_stress.cpp", "cpp"],
["tests/test_shutdown_stress_tipc.cpp", "cpp"],
["tests/test_socket_null.cpp", "cpp"],
["tests/test_socket_options_fuzzer.cpp", "cpp"],
["tests/test_sockopt_hwm.cpp", "cpp"],
["tests/test_socks.cpp", "cpp"],
["tests/test_sodium.cpp", "cpp"],
["tests/test_spec_dealer.cpp", "cpp"],
["tests/test_spec_pushpull.cpp", "cpp"],
["tests/test_spec_rep.cpp", "cpp"],
["tests/test_spec_req.cpp", "cpp"],
["tests/test_spec_router.cpp", "cpp"],
["tests/test_srcfd.cpp", "cpp"],
["tests/test_stream.cpp", "cpp"],
["tests/test_stream_disconnect.cpp", "cpp"],
["tests/test_stream_empty.cpp", "cpp"],
["tests/test_stream_exceeds_buffer.cpp", "cpp"],
["tests/test_stream_timeout.cpp", "cpp"],
["tests/test_sub_forward.cpp", "cpp"],
["tests/test_sub_forward_tipc.cpp", "cpp"],
["tests/test_system.cpp", "cpp"],
["tests/test_tcp_accept_filter.cpp", "cpp"],
["tests/test_term_endpoint.cpp", "cpp"],
["tests/test_term_endpoint_tipc.cpp", "cpp"],
["tests/test_thread_safe.cpp", "cpp"],
["tests/test_timeo.cpp", "cpp"],
["tests/test_timers.cpp", "cpp"],
["tests/test_unbind_wildcard.cpp", "cpp"],
["tests/test_use_fd.cpp", "cpp"],
["tests/testutil.cpp", "cpp"],
["tests/testutil.hpp", "cpp"],
["tests/testutil_monitoring.cpp", "cpp"],
["tests/testutil_monitoring.hpp", "cpp"],
["tests/testutil_security.cpp", "cpp"],
["tests/testutil_security.hpp", "cpp"],
["tests/testutil_unity.cpp", "cpp"],
["tests/testutil_unity.hpp", "cpp"],
["tests/test_wss_transport.cpp", "cpp"],
["tests/test_ws_transport.cpp", "cpp"],
["tests/test_xpub_manual.cpp", "cpp"],
["tests/test_xpub_manual_last_value.cpp", "cpp"],
["tests/test_xpub_nodrop.cpp", "cpp"],
["tests/test_xpub_verbose.cpp", "cpp"],
["tests/test_xpub_welcome_msg.cpp", "cpp"],
["tests/test_z85_decode_fuzzer.cpp", "cpp"],
["tests/test_zmq_poll_fd.cpp", "cpp"],
["unittests/unittest_curve_encoding.cpp", "cpp"],
["unittests/unittest_ip_resolver.cpp", "cpp"],
["unittests/unittest_mtrie.cpp", "cpp"],
["unittests/unittest_poller.cpp", "cpp"],
["unittests/unittest_radix_tree.cpp", "cpp"],
["unittests/unittest_resolver_common.hpp", "cpp"],
["unittests/unittest_udp_address.cpp", "cpp"],
["unittests/unittest_ypipe.cpp", "cpp"]
]

# minimum number of mutants per schema.
# min_mutants_per_schema = 3

# maximum number of mutants per schema (zero means no limit).
# mutants_per_schema = 1000

# sanity check the schemata before it is used by executing the test cases
# it is a slowdown but nice robustness that is usually worth having
check_schemata = true

[coverage]

# Use coverage to reduce the tested mutants
use = true

# how to add the coverage runtime to the SUT
# available options are: "inject", "library"
# runtime = "library"

# Default is to inject the runtime in all roots. A root is a file either provided by --in
# or a file in compile_commands.json.
# If specified then the coverage and schemata runtime is only injected in these files.
# paths are relative to root.
# inject_runtime_impl = [["file1.c", "c"], ["file2.c", "cpp"]]
inject_runtime_impl = [
["tests/test_abstract_ipc.cpp", "cpp"],
["tests/test_address_tipc.cpp", "cpp"],
["tests/test_ancillaries.cpp", "cpp"],
["tests/test_app_meta.cpp", "cpp"],
["tests/test_atomics.cpp", "cpp"],
["tests/test_base85.cpp", "cpp"],
["tests/test_bind_after_connect_tcp.cpp", "cpp"],
["tests/test_bind_curve_fuzzer.cpp", "cpp"],
["tests/test_bind_fuzzer.cpp", "cpp"],
["tests/test_bind_null_fuzzer.cpp", "cpp"],
["tests/test_bind_src_address.cpp", "cpp"],
["tests/test_bind_stream_fuzzer.cpp", "cpp"],
["tests/test_bind_ws_fuzzer.cpp", "cpp"],
["tests/test_busy_poll.cpp", "cpp"],
["tests/test_capabilities.cpp", "cpp"],
["tests/test_channel.cpp", "cpp"],
["tests/test_client_server.cpp", "cpp"],
["tests/test_conflate.cpp", "cpp"],
["tests/test_connect_curve_fuzzer.cpp", "cpp"],
["tests/test_connect_delay_tipc.cpp", "cpp"],
["tests/test_connect_fuzzer.cpp", "cpp"],
["tests/test_connect_null_fuzzer.cpp", "cpp"],
["tests/test_connect_resolve.cpp", "cpp"],
["tests/test_connect_rid.cpp", "cpp"],
["tests/test_connect_stream_fuzzer.cpp", "cpp"],
["tests/test_connect_ws_fuzzer.cpp", "cpp"],
["tests/test_ctx_destroy.cpp", "cpp"],
["tests/test_ctx_options.cpp", "cpp"],
["tests/test_dgram.cpp", "cpp"],
["tests/test_diffserv.cpp", "cpp"],
["tests/test_disconnect_inproc.cpp", "cpp"],
["tests/test_disconnect_msg.cpp", "cpp"],
["tests/test_filter_ipc.cpp", "cpp"],
["tests/test_fork.cpp", "cpp"],
["tests/test_getsockopt_memset.cpp", "cpp"],
["tests/test_heartbeats.cpp", "cpp"],
["tests/test_hello_msg.cpp", "cpp"],
["tests/test_hwm.cpp", "cpp"],
["tests/test_hwm_pubsub.cpp", "cpp"],
["tests/test_immediate.cpp", "cpp"],
["tests/test_inproc_connect.cpp", "cpp"],
["tests/test_invalid_rep.cpp", "cpp"],
["tests/test_iov.cpp", "cpp"],
["tests/test_ipc_wildcard.cpp", "cpp"],
["tests/test_issue_566.cpp", "cpp"],
["tests/test_last_endpoint.cpp", "cpp"],
["tests/test_many_sockets.cpp", "cpp"],
["tests/test_metadata.cpp", "cpp"],
["tests/test_mock_pub_sub.cpp", "cpp"],
["tests/test_monitor.cpp", "cpp"],
["tests/test_msg_ffn.cpp", "cpp"],
["tests/test_msg_flags.cpp", "cpp"],
["tests/test_msg_init.cpp", "cpp"],
["tests/test_pair_inproc.cpp", "cpp"],
["tests/test_pair_ipc.cpp", "cpp"],
["tests/test_pair_tcp_cap_net_admin.cpp", "cpp"],
["tests/test_pair_tcp.cpp", "cpp"],
["tests/test_pair_tipc.cpp", "cpp"],
["tests/test_pair_vmci.cpp", "cpp"],
["tests/test_peer.cpp", "cpp"],
["tests/test_poller.cpp", "cpp"],
["tests/test_probe_router.cpp", "cpp"],
["tests/test_proxy.cpp", "cpp"],
["tests/test_proxy_hwm.cpp", "cpp"],
["tests/test_proxy_single_socket.cpp", "cpp"],
["tests/test_proxy_terminate.cpp", "cpp"],
["tests/test_pub_invert_matching.cpp", "cpp"],
["tests/test_pubsub.cpp", "cpp"],
["tests/test_radio_dish.cpp", "cpp"],
["tests/test_rebind_ipc.cpp", "cpp"],
["tests/test_reconnect_ivl.cpp", "cpp"],
["tests/test_reconnect_options.cpp", "cpp"],
["tests/test_req_correlate.cpp", "cpp"],
["tests/test_req_relaxed.cpp", "cpp"],
["tests/test_reqrep_device.cpp", "cpp"],
["tests/test_reqrep_device_tipc.cpp", "cpp"],
["tests/test_reqrep_inproc.cpp", "cpp"],
["tests/test_reqrep_ipc.cpp", "cpp"],
["tests/test_reqrep_tcp.cpp", "cpp"],
["tests/test_reqrep_tipc.cpp", "cpp"],
["tests/test_reqrep_vmci.cpp", "cpp"],
["tests/test_router_handover.cpp", "cpp"],
["tests/test_router_mandatory.cpp", "cpp"],
["tests/test_router_mandatory_hwm.cpp", "cpp"],
["tests/test_router_mandatory_tipc.cpp", "cpp"],
["tests/test_router_notify.cpp", "cpp"],
["tests/test_scatter_gather.cpp", "cpp"],
["tests/test_security_curve.cpp", "cpp"],
["tests/test_security_gssapi.cpp", "cpp"],
["tests/test_security_no_zap_handler.cpp", "cpp"],
["tests/test_security_null.cpp", "cpp"],
["tests/test_security_plain.cpp", "cpp"],
["tests/test_security_zap.cpp", "cpp"],
["tests/test_setsockopt.cpp", "cpp"],
["tests/test_shutdown_stress.cpp", "cpp"],
["tests/test_shutdown_stress_tipc.cpp", "cpp"],
["tests/test_socket_null.cpp", "cpp"],
["tests/test_socket_options_fuzzer.cpp", "cpp"],
["tests/test_sockopt_hwm.cpp", "cpp"],
["tests/test_socks.cpp", "cpp"],
["tests/test_sodium.cpp", "cpp"],
["tests/test_spec_dealer.cpp", "cpp"],
["tests/test_spec_pushpull.cpp", "cpp"],
["tests/test_spec_rep.cpp", "cpp"],
["tests/test_spec_req.cpp", "cpp"],
["tests/test_spec_router.cpp", "cpp"],
["tests/test_srcfd.cpp", "cpp"],
["tests/test_stream.cpp", "cpp"],
["tests/test_stream_disconnect.cpp", "cpp"],
["tests/test_stream_empty.cpp", "cpp"],
["tests/test_stream_exceeds_buffer.cpp", "cpp"],
["tests/test_stream_timeout.cpp", "cpp"],
["tests/test_sub_forward.cpp", "cpp"],
["tests/test_sub_forward_tipc.cpp", "cpp"],
["tests/test_system.cpp", "cpp"],
["tests/test_tcp_accept_filter.cpp", "cpp"],
["tests/test_term_endpoint.cpp", "cpp"],
["tests/test_term_endpoint_tipc.cpp", "cpp"],
["tests/test_thread_safe.cpp", "cpp"],
["tests/test_timeo.cpp", "cpp"],
["tests/test_timers.cpp", "cpp"],
["tests/test_unbind_wildcard.cpp", "cpp"],
["tests/test_use_fd.cpp", "cpp"],
["tests/testutil.cpp", "cpp"],
["tests/testutil.hpp", "cpp"],
["tests/testutil_monitoring.cpp", "cpp"],
["tests/testutil_monitoring.hpp", "cpp"],
["tests/testutil_security.cpp", "cpp"],
["tests/testutil_security.hpp", "cpp"],
["tests/testutil_unity.cpp", "cpp"],
["tests/testutil_unity.hpp", "cpp"],
["tests/test_wss_transport.cpp", "cpp"],
["tests/test_ws_transport.cpp", "cpp"],
["tests/test_xpub_manual.cpp", "cpp"],
["tests/test_xpub_manual_last_value.cpp", "cpp"],
["tests/test_xpub_nodrop.cpp", "cpp"],
["tests/test_xpub_verbose.cpp", "cpp"],
["tests/test_xpub_welcome_msg.cpp", "cpp"],
["tests/test_z85_decode_fuzzer.cpp", "cpp"],
["tests/test_zmq_poll_fd.cpp", "cpp"],
["unittests/unittest_curve_encoding.cpp", "cpp"],
["unittests/unittest_ip_resolver.cpp", "cpp"],
["unittests/unittest_mtrie.cpp", "cpp"],
["unittests/unittest_poller.cpp", "cpp"],
["unittests/unittest_radix_tree.cpp", "cpp"],
["unittests/unittest_resolver_common.hpp", "cpp"],
["unittests/unittest_udp_address.cpp", "cpp"],
["unittests/unittest_ypipe.cpp", "cpp"]
]

[database]

# path (absolute or relative) where mutation statistics will be stored.
db = "dextool_mutate.sqlite3"

[compiler]

# extra flags to pass on to the compiler such as the C++ standard.
# extra_flags = []

# force system includes to use -I instead of -isystem
# force_system_includes = false

# system include paths to use instead of the ones in compile_commands.json
# use_compiler_system_includes = "/path/to/c++"

# allow compilation errors.
# This is useful to active when clang complain about e.g. gcc specific builtins
# allow_errors = true

[compile_commands]

# files and/or directories to look for compile_commands.json.
search_paths = ["./build/compile_commands.json"]

# compile flags to remove when analyzing a file.
# filter = ["-c", "-o", "-m", "-nodevicelib", "-Waddr-space-convert", "-non-static", "-Bstatic", "-Bdynamic", "-Xbind-lazy", "-Xbind-now", "-f", "-static", "-shared", "-rdynamic", "-s", "-l", "-L", "-z", "-u", "-T", "-Xlinker", "-l", "-MT", "-MF", "-MD", "-MQ", "-MMD", "-MP", "-MG", "-E", "-cc1", "-S", "-M", "-MM", "-###"]

# number of compiler arguments to skip from the beginning (needed when the first argument is NOT a compiler but rather a wrapper).
# skip_compiler_args = 0

[mutant_test]

# command to build the program **and** test suite.
build_cmd = ["cd build && make -j8"]

# at least one of test_cmd_dir (recommended) or test_cmd needs to be specified.

# path(s) to recursively look for test binaries to execute.
# test_cmd_dir = ["./build/bin"]

# flags to add to all executables found in test_cmd_dir.
# test_cmd_dir_flag = ["--gtest_filter", "-foo*"]

# command(s) to test the program.
# the arguments for test_cmd can be an array of multiple test commands
# 1. ["test1.sh", "test2.sh"]
# 2. [["test1.sh", "-x"], "test2.sh"]
# 3. [["/bin/make", "test"]]
# note: failing test_cmd has been removed
test_cmd = [["build/bin/test_security_gssapi"], ["build/bin/unittest_ip_resolver"], ["build/bin/test_socks"], ["build/bin/test_socket_null"], ["build/bin/test_security_no_zap_handler"], ["build/bin/test_reqrep_ipc"], ["build/bin/test_iov"], ["build/bin/test_security_null"], ["build/bin/test_srcfd"], ["build/bin/test_issue_566"], ["build/bin/test_invalid_rep"], ["build/bin/test_metadata"], ["build/bin/test_inproc_connect"], ["build/bin/test_req_relaxed"], ["build/bin/test_pair_tcp"], ["build/bin/test_unbind_wildcard"], ["build/bin/test_radio_dish"], ["build/bin/test_proxy"], ["build/bin/test_spec_dealer"], ["build/bin/test_probe_router"], ["build/bin/test_spec_router"], ["build/bin/test_proxy_terminate"], ["build/bin/test_shutdown_stress"], ["build/bin/test_ipc_wildcard"], ["build/bin/test_pair_ipc"], ["build/bin/test_immediate"], ["build/bin/test_reconnect_options"], ["build/bin/test_bind_after_connect_tcp"], ["build/bin/test_xpub_manual"], ["build/bin/test_proxy_single_socket"], ["build/bin/test_spec_rep"], ["build/bin/test_mock_pub_sub"], ["build/bin/test_monitor"], ["build/bin/test_pair_inproc"], ["build/bin/test_heartbeats"], ["build/bin/test_hwm"], ["build/bin/test_router_handover"], ["build/bin/unittest_udp_address"], ["build/bin/test_connect_rid"], ["build/bin/unittest_curve_encoding"], ["build/bin/test_rebind_ipc"], ["build/bin/unittest_ypipe"], ["build/bin/test_hwm_pubsub"], ["build/bin/test_use_fd"], ["build/bin/test_sodium"], ["build/bin/test_dgram"], ["build/bin/test_router_mandatory"], ["build/bin/test_ancillaries"], ["build/bin/test_stream"], ["build/bin/test_security_zap"], ["build/bin/test_msg_init"], ["build/bin/test_stream_timeout"], ["build/bin/test_abstract_ipc"], ["build/bin/test_ctx_destroy"], ["build/bin/test_reqrep_tcp"], ["build/bin/test_security_plain"], ["build/bin/test_ctx_options"], ["build/bin/test_sub_forward"], ["build/bin/unittest_poller"], ["build/bin/test_stream_empty"], ["build/bin/test_base85"], ["build/bin/test_conflate"], ["build/bin/test_hello_msg"], ["build/bin/test_stream_disconnect"], ["build/bin/unittest_radix_tree"], ["build/bin/test_busy_poll"], ["build/bin/test_reqrep_inproc"], ["build/bin/test_sockopt_hwm"], ["build/bin/test_poller"], ["build/bin/test_reqrep_device"], ["build/bin/test_connect_resolve"], ["build/bin/test_proxy_hwm"], ["build/bin/test_last_endpoint"], ["build/bin/test_xpub_nodrop"], ["build/bin/test_many_sockets"], ["build/bin/test_router_notify"], ["build/bin/test_system"], ["build/bin/test_capabilities"], ["build/bin/test_scatter_gather"], ["build/bin/test_term_endpoint_tipc"], ["build/bin/test_term_endpoint"], ["build/bin/test_diffserv"], ["build/bin/test_thread_safe"], ["build/bin/test_ws_transport"], ["build/bin/test_router_mandatory_tipc"], ["build/bin/test_disconnect_inproc"], ["build/bin/unittest_mtrie"], ["build/bin/test_msg_flags"], ["build/bin/test_spec_req"], ["build/bin/test_timers"], ["build/bin/test_reconnect_ivl"], ["build/bin/test_bind_src_address"], ["build/bin/test_tcp_accept_filter"], ["build/bin/test_xpub_verbose"], ["build/bin/test_app_meta"], ["build/bin/test_xpub_manual_last_value"], ["build/bin/test_router_mandatory_hwm"], ["build/bin/test_peer"], ["build/bin/test_channel"], ["build/bin/test_filter_ipc"], ["build/bin/test_setsockopt"], ["build/bin/test_getsockopt_memset"], ["build/bin/test_pub_invert_matching"], ["build/bin/test_timeo"], ["build/bin/test_spec_pushpull"], ["build/bin/test_stream_exceeds_buffer"], ["build/bin/test_atomics"], ["build/bin/test_client_server"], ["build/bin/test_fork"], ["build/bin/test_req_correlate"], ["build/bin/test_zmq_poll_fd"], ["build/bin/test_disconnect_msg"], ["build/bin/test_xpub_welcome_msg"], ["build/bin/test_msg_ffn"]]
# failing [["build/bin/test_z85_decode_fuzzer"], ["build/bin/test_security_curve"], ["build/bin/test_reqrep_device_tipc"], ["build/bin/test_bind_fuzzer"], ["build/bin/test_connect_null_fuzzer"], ["build/bin/test_bind_null_fuzzer"], ["build/bin/test_pair_tipc"], ["build/bin/test_connect_delay_tipc"], ["build/bin/test_reqrep_tipc"], ["build/bin/test_sub_forward_tipc"], ["build/bin/test_connect_fuzzer"], ["build/bin/test_address_tipc"], ["build/bin/test_bind_curve_fuzzer"], ["build/bin/test_connect_curve_fuzzer"], ["build/bin/test_shutdown_stress_tipc"]]

# timeout to use for the test suite (by default a measurement-based heuristic will be used).
# test_cmd_timeout = "1 hours 1 minutes 1 seconds 1 msecs"

# timeout to use when compiling the program and test suite (default: 30 minutes)
# build_cmd_timeout = "1 hours 1 minutes 1 seconds 1 msecs"

# program used to analyze the output from the test suite for test cases that killed the mutant
# analyze_cmd = "analyze.sh"

# built-in analyzer of output from testing frameworks to find failing test cases
# available options are: ["gtest", "ctest", "makefile", "test_cmd"]
analyze_using_builtin = ["test_cmd"]

# determine in what order mutants are chosen
# available options are: "random" "consecutive" "bySize"
# order = "bySize"

# how to behave when new test cases are found
# available options are: "doNothing" "resetAlive"
detected_new_test_case = "resetAlive"

# how to behave when test cases are detected as having been removed
# should the test and the gathered statistics be removed too?
# available options are: "doNothing" "remove"
detected_dropped_test_case = "remove"

# how the oldest mutants should be treated.
# It is recommended to test them again.
# Because you may have changed the test suite so mutants that where previously killed by the test suite now survive.
# available options are: "nothing" "test"
oldest_mutants = "test"

# how many of the oldest mutants to do the above with
# oldest_mutants_nr = 10
# how many of the oldest mutants to do the above with
oldest_mutants_percentage = 1.0

# number of threads to be used when running tests in parallel (default is the number of cores).
# parallel_test = 8

# stop executing tests as soon as a test command fails.
# This speed up the test phase but the report of test cases killing mutants is less accurate
use_early_stop = true

# Enable continues sanity check of the build environment and test suite.
# Run the test suite every 100 mutant to see that the test suite is OK when no mutants are injected.
# If the test suite fails the previous 100 mutants will be reverted and mutation testing stops.
continues_check_test_suite = true

# How often the test suite check is performed
continues_check_test_suite_period = 100

# Compare the checksum of the test binaries with and without a mutant injected to determine which test binaries need to be executed.
# Requires that all `test_cmd`s are binaries, it can not be e.g. make test or scripts.
test_cmd_checksum = true

# Max output to capture from a test case. Useful when e.g. a test case goes into an infinite loop and spew out Gbyte of text.
# Unit is Mbyte
# max_test_cmd_output = 10

[report]

# default style to use
# available options are: "plain" "compiler" "json" "html"
style = "plain"

# default report sections when no --section is specified
# available options are: ["alive", "killed", "all_mut", "summary", "mut_stat", "tc_killed", "tc_stat", "tc_map", "tc_suggestion", "tc_killed_no_mutants", "tc_full_overlap", "tc_full_overlap_with_mutation_id", "tc_groups", "tc_min_set", "tc_similarity", "tc_groups_similarity", "treemap", "mut_recommend_kill", "diff", "tc_unique", "marked_mutants", "trend"]
sections = ["summary"]

# how many mutants to show in the high interest section
# high_interest_mutants_nr = 5

[test_group]

# subgroups with a description and pattern. Example:
# [test_group.uc1]
# description = "use case 1"
# pattern = "uc_1.*"
# see for regex syntax: http://dlang.org/phobos/std_regex.html

